---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 6h
  maxHistory: 2
  timeout: 20m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 40.2.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  install:
    createNamespace: true
    crds: CreateReplace
    remediation: # perform remediation when helm install fails
      retries: 5
  upgrade:
    crds: CreateReplace
    remediation: # perform remediation when helm upgrade fails
      retries: 5
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  values:
    fullnameOverride: prometheus
    coreDns:
      enabled: true

    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: false # FIXME

    kubeEtcd:
      enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeProxy:
      enabled: false # FIXME

    kubeScheduler:
      enabled: false # FIXME

    kubeStateMetrics:
      enabled: true

    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        # limits:
        # memory: 326M

      prometheusConfigReloader:
        resources:
          requests:
            cpu: 11m
            memory: 24M
          # limits:
          # memory: 32M

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            global:
              enabled: true

    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      extraArgs:
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var)($|/)
        - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs|tmpfs)$
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

      resources:
        requests:
          cpu: 23m
          memory: 64M
        # limits:
        #   memory: 64M
      tolerations:
        - effect: "NoExecute"
          operator: "Exists"
        - effect: "NoSchedule"
          operator: "Exists"

    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: database-clock
          hajimari.io/appName: Prometheus

        hosts:
          - &host prometheus.${EXTERNAL_DOMAIN}
        tls:
          - hosts:
              - *host

      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true

      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retentionSize: "8GB"
        retention: 14d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: csi-nfs-smoltank
              resources:
                requests:
                  storage: 10Gi
        resources:
          requests:
            cpu: 350m
            memory: 4744M
            # limits:
            # memory: 4744M
        thanos:
          image: quay.io/thanos/thanos:v0.28.0
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: v0.28.0
          objectStorageConfig:
            name: &secret thanos-objstore-secret
            key: objstore.yml

        # podAnnotations:
        #   secret.reloader.stakater.com/reload: *secret

        additionalScrapeConfigs:
          - job_name: minio
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            static_configs:
              - targets:
                  - "s3.${EXTERNAL_DOMAIN}"

          # - job_name: "kubernetes-ingresses-http-2xx"
          #   metrics_path: /probe
          #   scrape_interval: 2m
          #   params:
          #     module: [http_2xx]
          #   kubernetes_sd_configs:
          #     - role: ingress
          #   relabel_configs:
          #     - source_labels:
          #         [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
          #       action: keep
          #       regex: true
          #     - source_labels:
          #         [__meta_kubernetes_ingress_annotation_prometheus_io_module]
          #       action: keep
          #       regex: http_2xx
          #     - source_labels:
          #         [
          #           __meta_kubernetes_ingress_scheme,
          #           __address__,
          #           __meta_kubernetes_ingress_path,
          #         ]
          #       regex: (.+);(.+);(.+)
          #       replacement: $${1}://$${2}$${3}
          #       target_label: __param_target
          #     - target_label: __address__
          #       replacement: blackbox-exporter:9115
          #     - source_labels: [__param_target]
          #       target_label: instance
          #     - action: labelmap
          #       regex: __meta_kubernetes_ingress_label_(.+)
          #     - source_labels: [__meta_kubernetes_namespace]
          #       target_label: kubernetes_namespace
          #     - source_labels: [__meta_kubernetes_ingress_name]
          #       target_label: kubernetes_name

          # - job_name: "kubernetes-ingresses-http403"
          #   metrics_path: /probe
          #   scrape_interval: 2m
          #   params:
          #     module: [http_403]
          #   kubernetes_sd_configs:
          #     - role: ingress
          #   relabel_configs:
          #     - source_labels:
          #         [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
          #       action: keep
          #       regex: true
          #     - source_labels:
          #         [__meta_kubernetes_ingress_annotation_prometheus_io_module]
          #       action: keep
          #       regex: http_403
          #     - source_labels:
          #         [
          #           __meta_kubernetes_ingress_scheme,
          #           __address__,
          #           __meta_kubernetes_ingress_path,
          #         ]
          #       regex: (.+);(.+);(.+)
          #       replacement: $${1}://$${2}$${3}
          #       target_label: __param_target
          #     - target_label: __address__
          #       replacement: blackbox-exporter:9115
          #     - source_labels: [__param_target]
          #       target_label: instance
          #     - action: labelmap
          #       regex: __meta_kubernetes_ingress_label_(.+)
          #     - source_labels: [__meta_kubernetes_namespace]
          #       target_label: kubernetes_namespace
          #     - source_labels: [__meta_kubernetes_ingress_name]
          #       target_label: kubernetes_name

          # - job_name: "kubernetes-services-http"
          #   metrics_path: /probe
          #   scrape_interval: 2m
          #   params:
          #     module: [http_2xx]
          #   kubernetes_sd_configs:
          #     - role: service
          #   relabel_configs:
          #     - source_labels:
          #         [__meta_kubernetes_service_annotation_prometheus_io_probe]
          #       action: keep
          #       regex: true
          #     - source_labels:
          #         [__meta_kubernetes_service_annotation_prometheus_io_protocol]
          #       action: keep
          #       regex: http
          #     - source_labels: [__address__]
          #       target_label: __param_target
          #     - target_label: __address__
          #       replacement: blackbox-exporter:9115
          #     - source_labels: [__param_target]
          #       target_label: instance
          #     - action: labelmap
          #       regex: __meta_kubernetes_service_label_(.+)
          #     - source_labels: [__meta_kubernetes_namespace]
          #       target_label: kubernetes_namespace
          #     - source_labels: [__meta_kubernetes_service_name]
          #       target_label: kubernetes_name

          # - job_name: "kubernetes-services-tcp"
          #   metrics_path: /probe
          #   scrape_interval: 2m
          #   params:
          #     module: [tcp_connect]
          #   kubernetes_sd_configs:
          #     - role: service
          #   relabel_configs:
          #     - source_labels:
          #         [__meta_kubernetes_service_annotation_prometheus_io_probe]
          #       action: keep
          #       regex: true
          #     - source_labels:
          #         [__meta_kubernetes_service_annotation_prometheus_io_protocol]
          #       action: keep
          #       regex: tcp
          #     - source_labels: [__address__]
          #       target_label: __param_target
          #     - target_label: __address__
          #       replacement: blackbox-exporter:9115
          #     - source_labels: [__param_target]
          #       target_label: instance
          #     - action: labelmap
          #       regex: __meta_kubernetes_service_label_(.+)
          #     - source_labels: [__meta_kubernetes_namespace]
          #       target_label: kubernetes_namespace
          #     - source_labels: [__meta_kubernetes_service_name]
          #       target_label: kubernetes_name
