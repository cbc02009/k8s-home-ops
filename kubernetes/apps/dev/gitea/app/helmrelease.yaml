---
# yaml-language-server: $schema=https://kubernetes-schemas.kokoro.wtf/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: gitea
  namespace: dev
spec:
  interval: 5m
  chart:
    spec:
      chart: &app gitea
      version: 8.1.0
      sourceRef:
        kind: HelmRepository
        name: gitea-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation: # perform remediation when helm install fails
      retries: 5
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 5
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  postRenderers:
    - kustomize:
        patchesStrategicMerge:
          - kind: StatefulSet
            apiVersion: apps/v1
            metadata:
              name: gitea
            spec:
              template:
                spec:
                  initContainers:
                    - name: init-db
                      image: ghcr.io/onedr0p/postgres-initdb:14.7
                      envFrom:
                        - secretRef:
                            name: gitea-secret
  valuesFrom:
    - targetPath: gitea.config.attachment.MINIO_ACCESS_KEY_ID
      kind: Secret
      name: gitea-secret
      valuesKey: minioAccessKeyId
    - targetPath: gitea.config.attachment.MINIO_SECRET_ACCESS_KEY
      kind: Secret
      name: gitea-secret
      valuesKey: minioSecretAccessKey
    - targetPath: gitea.config.storage.MINIO_ACCESS_KEY_ID
      kind: Secret
      name: gitea-secret
      valuesKey: minioAccessKeyId
    - targetPath: gitea.config.storage.MINIO_SECRET_ACCESS_KEY
      kind: Secret
      name: gitea-secret
      valuesKey: minioSecretAccessKey
  values:
    # Default values for gitea.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    ## @section Global
    #
    ## @param global.imageRegistry global image registry override
    ## @param global.imagePullSecrets global image pull secrets override; can be extended by `imagePullSecrets`
    ## @param global.storageClass global storage class override
    global:
      imageRegistry: ""
      ## E.g.
      ## imagePullSecrets:
      ##   - myRegistryKeySecretName
      ##
      imagePullSecrets: []
      storageClass: ""

    ## @param replicaCount number of replicas for the statefulset
    replicaCount: 1

    ## @param clusterDomain cluster domain
    clusterDomain: cluster.local

    ## @section Image
    ## @param image.registry image registry, e.g. gcr.io,docker.io
    ## @param image.repository Image to start for this pod
    ## @param image.tag Visit: [Image tag](https://hub.docker.com/r/gitea/gitea/tags?page=1&ordering=last_updated). Defaults to `appVersion` within Chart.yaml.
    ## @param image.pullPolicy Image pull policy
    ## @param image.rootless Wether or not to pull the rootless version of Gitea, only works on Gitea 1.14.x or higher
    image:
      # registry: ghcr.io
      # repository: cbc02009/gitea
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
      pullPolicy: IfNotPresent
      rootless: true # only possible when running 1.14 or later

    ## @param imagePullSecrets Secret to use for pulling the image
    imagePullSecrets: []

    ## @section Security
    # Security context is only usable with rootless image due to image design
    ## @param podSecurityContext.fsGroup Set the shared file system group for all containers in the pod.
    podSecurityContext:
      fsGroup: 1000

    ## @param containerSecurityContext Security context
    containerSecurityContext:
      capabilities:
        add: ["SYS_CHROOT"]
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   # Add the SYS_CHROOT capability for root and rootless images if you intend to
    #   # run pods on nodes that use the container runtime cri-o. Otherwise, you will
    #   # get an error message from the SSH server that it is not possible to read from
    #   # the repository.
    #   # https://gitea.com/gitea/helm-chart/issues/161
    #     add:
    #       - SYS_CHROOT
    #   privileged: false
    #   readOnlyRootFilesystem: true
    #   runAsGroup: 1000
    #   runAsNonRoot: true
    #   runAsUser: 1000

    ## @section Service
    service:
      ## @param service.http.type Kubernetes service type for web traffic
      ## @param service.http.port Port number for web traffic
      ## @param service.http.clusterIP ClusterIP setting for http autosetup for statefulset is None
      ## @param service.http.loadBalancerIP LoadBalancer IP setting
      ## @param service.http.nodePort NodePort for http service
      ## @param service.http.externalTrafficPolicy If `service.http.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
      ## @param service.http.externalIPs External IPs for service
      ## @param service.http.ipFamilyPolicy HTTP service dual-stack policy
      ## @param service.http.ipFamilies HTTP service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
      ## @param service.http.loadBalancerSourceRanges Source range filter for http loadbalancer
      ## @param service.http.annotations HTTP service annotations
      http:
        type: LoadBalancer
        port: 3000
        annotations:
          metallb.universe.tf/allow-shared-ip: gitea
        loadBalancerIP: ${LB_GITEA}
      ## @param service.ssh.type Kubernetes service type for ssh traffic
      ## @param service.ssh.port Port number for ssh traffic
      ## @param service.ssh.clusterIP ClusterIP setting for ssh autosetup for statefulset is None
      ## @param service.ssh.loadBalancerIP LoadBalancer IP setting
      ## @param service.ssh.nodePort NodePort for ssh service
      ## @param service.ssh.externalTrafficPolicy If `service.ssh.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
      ## @param service.ssh.externalIPs External IPs for service
      ## @param service.ssh.ipFamilyPolicy SSH service dual-stack policy
      ## @param service.ssh.ipFamilies SSH service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
      ## @param service.ssh.hostPort HostPort for ssh service
      ## @param service.ssh.loadBalancerSourceRanges Source range filter for ssh loadbalancer
      ## @param service.ssh.annotations SSH service annotations
      ssh:
        type: LoadBalancer
        port: 2222
        annotations:
          metallb.universe.tf/allow-shared-ip: gitea
        loadBalancerIP: ${LB_GITEA}

    ## @section Ingress
    ## @param ingress.enabled Enable ingress
    ## @param ingress.className Ingress class name
    ## @param ingress.annotations Ingress annotations
    ## @param ingress.hosts[0].host Default Ingress host
    ## @param ingress.hosts[0].paths[0].path Default Ingress path
    ## @param ingress.hosts[0].paths[0].pathType Ingress path type
    ## @param ingress.tls Ingress tls settings
    ## @extra ingress.apiVersion Specify APIVersion of ingress object. Mostly would only be used for argocd.
    ingress:
      enabled: true
      className: nginx
      annotations:
        ingress.home.arpa/type: "external-auth"
      hosts:
        - host: &host gitea.${EXTERNAL_DOMAIN}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName:
          hosts:
            - *host

    ## @section StatefulSet
    #
    ## @param resources Kubernetes resources
    resources:
      requests:
        cpu: 15m
        memory: 203M
      limits:
        cpu: 32m
        memory: 608M
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    ## Use an alternate scheduler, e.g. "stork".
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    ## @param schedulerName Use an alternate scheduler, e.g. "stork"
    schedulerName: ""

    ## @param nodeSelector NodeSelector for the statefulset
    nodeSelector: {}

    ## @param tolerations Tolerations for the statefulset
    tolerations: []

    ## @param affinity Affinity for the statefulset
    affinity: {}

    ## @param dnsConfig dnsConfig for the statefulset
    dnsConfig: {}

    ## @param statefulset.env  Additional environment variables to pass to containers
    ## @param statefulset.terminationGracePeriodSeconds How long to wait until forcefully kill the pod
    ## @param statefulset.labels Labels for the statefulset
    ## @param statefulset.annotations Annotations for the Gitea StatefulSet to be created
    statefulset:
      env:
        []
        # - name: VARIABLE
        #   value: my-value
      terminationGracePeriodSeconds: 60
      labels: {}
      annotations: {}

    ## @section Persistence
    #
    ## @param persistence.enabled Enable persistent storage
    ## @param persistence.existingClaim Use an existing claim to store repository information
    ## @param persistence.size Size for persistence to store repo information
    ## @param persistence.accessModes AccessMode for persistence
    ## @param persistence.labels Labels for the persistence volume claim to be created
    ## @param persistence.annotations Annotations for the persistence volume claim to be created
    ## @param persistence.storageClass Name of the storage class to use
    ## @param persistence.subPath Subdirectory of the volume to mount at
    persistence:
      enabled: true
      existingClaim: gitea-config-v1

    ## @param extraVolumes Additional volumes to mount to the Gitea statefulset
    extraVolumes:
      - name: repo-vol
        nfs:
          server: ${SAN_HOST}
          path: /smoltank/k8s/apps/gitea
          readOnly: false

    ## @param extraContainerVolumeMounts Mounts that are only mapped into the Gitea runtime/main container, to e.g. override custom templates.
    extraContainerVolumeMounts:
      - mountPath: /data/git/gitea-repositories
        name: repo-vol

    ## @param extraInitVolumeMounts Mounts that are only mapped into the init-containers. Can be used for additional preconfiguration.
    extraInitVolumeMounts: []

    ## @depracated The extraVolumeMounts variable has been split two:
    ## - extraContainerVolumeMounts
    ## - extraInitVolumeMounts
    ## As an example, can be used to mount a client cert when connecting to an external Postgres server.
    ## @param extraVolumeMounts **DEPRECATED** Additional volume mounts for init containers and the Gitea main container
    extraVolumeMounts: []
    # - name: postgres-ssl-vol
    #   readOnly: true
    #   mountPath: "/pg-ssl"

    ## @section Init
    ## @param initPreScript Bash shell script copied verbatim to the start of the init-container.
    initPreScript: ""
    #
    # initPreScript: |
    #   mkdir -p /data/git/.postgresql
    #   cp /pg-ssl/* /data/git/.postgresql/
    #   chown -R git:git /data/git/.postgresql/
    #   chmod 400 /data/git/.postgresql/postgresql.key

    # Configure commit/action signing prerequisites
    ## @section Signing
    #
    ## @param signing.enabled Enable commit/action signing
    ## @param signing.gpgHome GPG home directory
    signing:
      enabled: false
      gpgHome: /data/git/.gnupg

    ## @section Gitea
    #
    gitea:
      ## @param gitea.admin.username Username for the Gitea admin user
      ## @param gitea.admin.existingSecret Use an existing secret to store admin user credentials
      ## @param gitea.admin.password Password for the Gitea admin user
      ## @param gitea.admin.email Email for the Gitea admin user
      admin:
        existingSecret: gitea-secret

      ## @param gitea.metrics.enabled Enable Gitea metrics
      ## @param gitea.metrics.serviceMonitor.enabled Enable Gitea metrics service monitor
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          #  additionalLabels:
          #    prometheus-release: prom1

      ## @param gitea.ldap LDAP configuration
      ldap:
        []
        # - name: "LDAP 1"
        #  existingSecret:
        #  securityProtocol:
        #  host:
        #  port:
        #  userSearchBase:
        #  userFilter:
        #  adminFilter:
        #  emailAttribute:
        #  bindDn:
        #  bindPassword:
        #  usernameAttribute:
        #  publicSSHKeyAttribute:

      # Either specify inline `key` and `secret` or refer to them via `existingSecret`
      ## @param gitea.oauth OAuth configuration
      oauth:
        - name: authelia
          provider: openidConnect
          key: gitea
          secret: "${SECRET_GITEA_OAUTH_CLIENT_SECRET}"
          autoDiscoverUrl: "https://auth.${EXTERNAL_DOMAIN}/.well-known/openid-configuration"
          groupClaimName: groups
          adminGroup: admins
          restrictedGroup: people
        # - name: 'OAuth 1'
        #   provider:
        #   key:
        #   secret:
        #   existingSecret:
        #   autoDiscoverUrl:
        #   useCustomUrls:
        #   customAuthUrl:
        #   customTokenUrl:
        #   customProfileUrl:
        #   customEmailUrl:

      ## @param gitea.config  Configuration for the Gitea server,ref: [config-cheat-sheet](https://docs.gitea.io/en-us/config-cheat-sheet/)
      config:
        APP_NAME: Tea, Git, Hot
        server:
          DISABLE_SSH: false
          DOMAIN: "gitea.${EXTERNAL_DOMAIN}"
          ROOT_URL: "https://gitea.${EXTERNAL_DOMAIN}"
          ENABLE_GZIP: true
          LANDING_PAGE: login
          LFS_START_SERVER: true
        admin:
          DISABLE_REGULAR_ORG_CREATION: true
        ui:
          DEFAULT_THEME: arc-green
        repository:
          DEFAULT_BRANCH: main
          DEFAULT_PRIVATE: true
        database:
          DB_TYPE: postgres
          HOST: ${POSTGRES_HOST}
          NAME: gitea
          USER: ${SECRET_GITEA_POSTGRES_USER}
          PASSWD: ${SECRET_GITEA_POSTGRES_PASS}
          SCHEMA: public
        service:
          DISABLE_REGISTRATION: false
          ALLOW_ONLY_EXTERNAL_REGISTRATION: true
          SHOW_REGISTRATION_BUTTON: false
          REQUIRE_SIGNIN_VIEW: false
          DEFAULT_KEEP_EMAIL_PRIVATE: true
          DEFAULT_ALLOW_CREATE_ORGANIZATION: false
          DEFAULT_USER_IS_RESTRICTED: true
        cron:
          ENABLED: true
        attachment:
          STORAGE_TYPE: minio
          MINIO_ENDPOINT: ${MINIO_HOST}:9000
          MINIO_BUCKET: gitea
        storage:
          STORAGE_TYPE: minio
          MINIO_ENDPOINT: ${MINIO_HOST}:9000
          MINIO_BUCKET: gitea
        openid:
          ENABLE_OPENID_SIGNIN: false
          ENABLE_OPENID_SIGNUP: true
          WHITELISTED_URIS: "auth.${EXTERNAL_DOMAIN}"

      ## @param gitea.additionalConfigSources Additional configuration from secret or configmap
      additionalConfigSources: []
      #   - secret:
      #       secretName: gitea-app-ini-oauth
      #   - configMap:
      #       name: gitea-app-ini-plaintext

      ## @param gitea.additionalConfigFromEnvs Additional configuration sources from environment variables
      additionalConfigFromEnvs: []

      ## @section LivenessProbe
      #
      ## @param gitea.livenessProbe.enabled Enable liveness probe
      ## @param gitea.livenessProbe.tcpSocket.port Port to probe for liveness
      ## @param gitea.livenessProbe.initialDelaySeconds Initial delay before liveness probe is initiated
      ## @param gitea.livenessProbe.timeoutSeconds Timeout for liveness probe
      ## @param gitea.livenessProbe.periodSeconds Period for liveness probe
      ## @param gitea.livenessProbe.successThreshold Success threshold for liveness probe
      ## @param gitea.livenessProbe.failureThreshold Failure threshold for liveness probe
      # Modify the liveness probe for your needs or completely disable it by commenting out.
      livenessProbe:
        enabled: true
        tcpSocket:
          port: http
        initialDelaySeconds: 200
        timeoutSeconds: 1
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 10

      ## @section ReadinessProbe
      #
      ## @param gitea.readinessProbe.enabled Enable readiness probe
      ## @param gitea.readinessProbe.tcpSocket.port Port to probe for readiness
      ## @param gitea.readinessProbe.initialDelaySeconds Initial delay before readiness probe is initiated
      ## @param gitea.readinessProbe.timeoutSeconds Timeout for readiness probe
      ## @param gitea.readinessProbe.periodSeconds Period for readiness probe
      ## @param gitea.readinessProbe.successThreshold Success threshold for readiness probe
      ## @param gitea.readinessProbe.failureThreshold Failure threshold for readiness probe
      # Modify the readiness probe for your needs or completely disable it by commenting out.
      readinessProbe:
        enabled: true
        tcpSocket:
          port: http
        initialDelaySeconds: 5
        timeoutSeconds: 1
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3

      # # Uncomment the startup probe to enable and modify it for your needs.
      ## @section StartupProbe
      #
      ## @param gitea.startupProbe.enabled Enable startup probe
      ## @param gitea.startupProbe.tcpSocket.port Port to probe for startup
      ## @param gitea.startupProbe.initialDelaySeconds Initial delay before startup probe is initiated
      ## @param gitea.startupProbe.timeoutSeconds Timeout for startup probe
      ## @param gitea.startupProbe.periodSeconds Period for startup probe
      ## @param gitea.startupProbe.successThreshold Success threshold for startup probe
      ## @param gitea.startupProbe.failureThreshold Failure threshold for startup probe
      startupProbe:
        enabled: false
        tcpSocket:
          port: http
        initialDelaySeconds: 60
        timeoutSeconds: 1
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 10

    ## @section Memcached
    #
    ## @param memcached.enabled Memcached is loaded as a dependency from [Bitnami](https://github.com/bitnami/charts/tree/master/bitnami/memcached) if enabled in the values. Complete Configuration can be taken from their website.
    ## @param memcached.service.port Port for Memcached
    memcached:
      enabled: false
      service:
        port: 11211

    ## @section PostgreSQL
    #
    ## @param postgresql.enabled Enable PostgreSQL
    ## @param postgresql.global.postgresql.postgresqlDatabase PostgreSQL database (overrides postgresqlDatabase)
    ## @param postgresql.global.postgresql.postgresqlUsername PostgreSQL username (overrides postgresqlUsername)
    ## @param postgresql.global.postgresql.postgresqlPassword PostgreSQL admin password (overrides postgresqlPassword)
    ## @param postgresql.global.postgresql.servicePort PostgreSQL port (overrides service.port)
    ## @param postgresql.persistence.size PVC Storage Request for PostgreSQL volume
    postgresql:
      enabled: false

    # By default, removed or moved settings that still remain in a user defined values.yaml will cause Helm to fail running the install/update.
    # Set it to false to skip this basic validation check.
    ## @section Advanced
    ## @param checkDeprecation Set it to false to skip this basic validation check.
    checkDeprecation: true
