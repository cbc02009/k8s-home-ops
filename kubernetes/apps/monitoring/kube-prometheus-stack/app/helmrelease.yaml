---
# yaml-language-server: $schema=https://kubernetes-schemas.kokoro.wtf/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 6h
  maxHistory: 2
  timeout: 20m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 45.20.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  install:
    createNamespace: true
    crds: CreateReplace
    remediation: # perform remediation when helm install fails
      retries: 5
  upgrade:
    crds: CreateReplace
    remediation: # perform remediation when helm upgrade fails
      retries: 5
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  values:
    fullnameOverride: prometheus
    coreDns:
      enabled: true

    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: false # FIXME

    kubeEtcd:
      enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeProxy:
      enabled: false # FIXME

    kubeScheduler:
      enabled: false # FIXME

    kubeStateMetrics:
      enabled: true

    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        # limits:
        # memory: 326M

      prometheusConfigReloader:
        resources:
          requests:
            cpu: 11m
            memory: 24M
          # limits:
          # memory: 32M

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            global:
              enabled: true

    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    nodeExporter:
      enabled: false

    ###
    ### Prometheus instance values
    ###
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          ingress.home.arpa/type: "internal"
          hajimari.io/enable: "true"
          hajimari.io/icon: database-clock
          hajimari.io/appName: Prometheus

        hosts:
          - &host prometheus.${EXTERNAL_DOMAIN}
        tls:
          - hosts:
              - *host

      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true

      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: __replica__
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retentionSize: "8GB"
        retention: 14d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 10Gi
        resources:
          requests:
            cpu: 350m
            memory: 4744M
            # limits:
            # memory: 4744M
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: v0.30.1
          objectStorageConfig:
            name: &secret thanos-objstore-secret
            key: objstore.yml

        podAnnotations:
          secret.reloader.stakater.com/reload: *secret

        additionalScrapeConfigs:
          - job_name: coredns
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - 10.5.0.3:9153@gateway.${INTERNAL_DOMAIN}:9153
            relabel_configs:
              - source_labels: [__address__]
                regex: "(.*)@.*"
                replacement: $1
                target_label: __param_target
              - source_labels: [__address__]
                regex: "(.*)@.*"
                replacement: $1
                target_label: app_ip
              - source_labels: [__address__]
                regex: ".*@(.*)"
                replacement: $1
                target_label: instance
              - source_labels: [app_ip]
                regex: "(.*)"
                target_label: __address__
                replacement: $1

          - job_name: minio
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            static_configs:
              - targets:
                  - "${MINIO_HOST}:9000"

          - job_name: speedtest-exporter
            scrape_interval: 60m
            scrape_timeout: 60s
            honor_timestamps: true
            static_configs:
              - targets:
                  - gateway.${INTERNAL_DOMAIN}:9798

          - job_name: smartctl-exporter
            scrape_interval: 10m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${SAN_HOST}:9633"

          - job_name: node-exporter
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "sakura.ctec.run:9100"
                  - "anya.ctec.run:9100"
                  - "uiharu.ctec.run:9100"
                  - "rem.ctec.run:9100"
                  - "ram.ctec.run:9100"

    alertmanager:
      config:
        global:
          resolve_timeout: 5m

        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          ingress.home.arpa/type: "internal"
          hajimari.io/enable: "true"
          hajimari.io/icon: bell-alert
          hajimari.io/appName: Alertmanager

        hosts:
          - &host alertmanager.${EXTERNAL_DOMAIN}
        tls:
          - hosts:
              - *host

      alertmanagerSpec:
        replicas: 1
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi

      resources:
        requests:
          cpu: 10m
          memory: 50M
        limits:
          memory: 99M
  valuesFrom:
    - kind: Secret
      name: kube-prometheus-stack
      valuesKey: discord-webhook
      targetPath: alertmanager.config.global.slack_api_url
      optional: false
