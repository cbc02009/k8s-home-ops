---
# yaml-language-server: $schema=https://kubernetes-schemas.kokoro.wtf/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app nextcloud
  namespace: services
spec:
  interval: 15m
  chart:
    spec:
      chart: nextcloud
      version: 3.5.12
      sourceRef:
        kind: HelmRepository
        name: nextcloud-charts
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    ## Official nextcloud image version
    ## ref: https://hub.docker.com/r/library/nextcloud/tags/
    ##
    image:
      repository: docker.io/nextcloud
      # tag: 24.0.3-apache
      pullPolicy: IfNotPresent
      # pullSecrets:
      #   - myRegistrKeySecretName

    nameOverride: ""
    fullnameOverride: ""
    podAnnotations: {}
    deploymentAnnotations: {}

    # Number of replicas to be deployed
    replicaCount: 1

    ## Allowing use of ingress controllers
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ##
    ingress:
      enabled: true
      className: nginx
      annotations:
        ingress.home.arpa/type: "internal"
        nginx.ingress.kubernetes.io/proxy-body-size: "10G"
        nginx.ingress.kubernetes.io/proxy-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        nginx.ingress.kubernetes.io/server-snippet: |-
          server_tokens off;
          proxy_hide_header X-Powered-By;

          # Rule borrowed from .htaccess to handle Microsoft DAV clients
          location = / {
            if ( $http_user_agent ~ ^DavClnt ) {
              return 302 /remote.php/webdav/$is_args$args;
            }
          }

          location = /robots.txt {
              allow all;
              log_not_found off;
              access_log off;
          }

          location ^~ /.well-known {

            # The rules in this block are an adaptation of the rules
            # in .htaccess that concern /.well-known.

            location = /.well-known/carddav { return 301 /remote.php/dav/; }
            location = /.well-known/caldav  { return 301 /remote.php/dav/; }

            location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
            location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

            # Let Nextcloud's API for /.well-known URIs handle all other
            # requests by passing them to the front-end controller.
            return 301 /index.php$request_uri;
          }

          # Rules borrowed from .htaccess to hide certain paths from clients
          location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
            deny all;
          }
          location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
            deny all;
          }

      tls:
        - secretName: nextcloud-tls
          hosts:
            - &host nextcloud.${EXTERNAL_DOMAIN}
      labels: {}
      path: /
      pathType: Prefix


    # Allow configuration of lifecycle hooks
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
    lifecycle: {}
      # postStartCommand: []
      # preStopCommand: []

    phpClientHttpsFix:
      enabled: true
      protocol: https

    nextcloud:
      host: *host
      ## Use an existing secret
      existingSecret:
        enabled: true
        secretName: nextcloud-secret
        usernameKey: ADMIN_USER
        passwordKey: ADMIN_PASS
        # tokenKey: serverinfo_token
        # smtpUsernameKey: SMTP_USERNAME
        # smtpPasswordKey: SMTP_PASSWORD
      update: 0
      # If web server is not binding default port, you can define it
      # containerPort: 8080
      datadir: /var/www/html/data
      persistence:
        subPath:
      mail:
        enabled: false
        fromAddress: admin
        domain: ${EXTERNAL_DOMAIN}
        smtp:
          host: smtp-relay.services.svc.cluster.local
          secure: none
          port: 587
          authtype: LOGIN
      # PHP Configuration files
      # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
      phpConfigs: {}
      # Default config files
      # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
      # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
      defaultConfigs:
        # To protect /var/www/html/config
        .htaccess: true
        # Redis default configuration
        redis.config.php: true
        # Apache configuration for rewrite urls
        apache-pretty-urls.config.php: true
        # Define APCu as local cache
        apcu.config.php: true
        # Apps directory configs
        apps.config.php: true
        # Used for auto configure database
        autoconfig.php: true
        # SMTP default configuration
        smtp.config.php: true

      # For example, to use S3 as primary storage
      # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
      #
      configs:
        s3.config.php: |-
          <?php
          $CONFIG = array (
            'objectstore' => array(
              'class' => '\\OC\\Files\\ObjectStore\\S3',
              'arguments' => array(
                'hostname'   => 'minio.ctec.run',
                'port'       => 9000,
                'bucket'     => 'nextcloud',
                'autocreate' => true,
                'key'        => '${NC_MINIO_KEY}',
                'secret'     => '${NC_MINIO_SECRET}',
                'region'     => 'optional',
                'use_ssl'    => false,
                'use_path_style'=> true
              ),
            ),
          );

        proxy.config.php: |-
          <?php
          $CONFIG = array (
            'trusted_proxies' =>
            array(
               0 => '10.0.0.0/8',
            ),
            'forwarded_for_headers' =>
            array (
              0 => 'HTTP_X_FORWARDED_FOR',
            ),
          );

      ## Strategy used to replace old pods
      ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
      ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
      strategy:
        type: Recreate
        # type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 1
        #   maxUnavailable: 0

      ##
      ## Extra environment variables
      extraEnv:
      #  - name: SOME_SECRET_ENV
      #    valueFrom:
      #      secretKeyRef:
      #        name: nextcloud
      #        key: secret_key

      # Extra init containers that runs before pods start.
      extraInitContainers:
      #  - name: do-something
      #    image: busybox
      #    command: ['do', 'something']
        - name: init-db
          image: ghcr.io/onedr0p/postgres-initdb:14.7
          envFrom:
            - secretRef:
                name: nextcloud-secret

      # Extra sidecar containers.
      extraSidecarContainers: []
      #  - name: nextcloud-logger
      #    image: busybox
      #    command: [/bin/sh, -c, 'while ! test -f "/run/nextcloud/data/nextcloud.log"; do sleep 1; done; tail -n+1 -f /run/nextcloud/data/nextcloud.log']
      #    volumeMounts:
      #    - name: nextcloud-data
      #      mountPath: /run/nextcloud/data

      # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
      # to NextCloud pods in Kubernetes. This can then be configured in External Storage
      extraVolumes:
      #  - name: nfs
      #    nfs:
      #      server: "10.0.0.1"
      #      path: "/nextcloud_data"
      #      readOnly: false
      extraVolumeMounts:
      #  - name: nfs
      #    mountPath: "/legacy_data"

      # Extra secuurityContext parameters. For example you may need to define runAsNonRoot directive
      # extraSecurityContext:
      #   runAsUser: "33"
      #   runAsGroup: "33"
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

    nginx:
      ## You need to set an fpm version of the image for nextcloud if you want to use nginx!
      enabled: false
      image:
        repository: nginx
        tag: alpine
        pullPolicy: IfNotPresent

      config:
        # This generates the default nginx config as per the nextcloud documentation
        default: true
        # custom: |-
        #     worker_processes  1;..

      resources: {}

    internalDatabase:
      enabled: false
      name: nextcloud

    ##
    ## External database configuration
    ##
    externalDatabase:
      enabled: true

      ## Supported database engines: mysql or postgresql
      type: postgresql

      ## Database host
      host: ${POSTGRES_HOST}

      ## Database name
      database: nextcloud

      ## Use a existing secret
      existingSecret:
        enabled: true
        secretName: nextcloud-secret
        usernameKey: POSTGRES_USER
        passwordKey: POSTGRES_PASS

    ## Cronjob to execute Nextcloud background tasks
    ## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
    ##
    cronjob:
      enabled: true

      # Allow configuration of lifecycle hooks
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
      lifecycle: {}
        # postStartCommand: []
        # preStopCommand: []

    service:
      type: ClusterIP
      port: 8080
      loadBalancerIP: nil
      nodePort: nil

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      # Nextcloud Data (/var/www/html)
      enabled: true
      annotations: {}
      ## nextcloud data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"

      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      existingClaim: nextcloud-config-v1

      # accessMode: ReadWriteOnce
      # size: 8Gi

      ## Use an additional pvc for the data directory rather than a subpath of the default PVC
      ## Useful to store data on a different storageClass (e.g. on slower disks)
      nextcloudData:
        enabled: false
        subPath:
        annotations: {}
        # storageClass: "-"
        # existingClaim:
        accessMode: ReadWriteOnce
        size: 8Gi

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi

    ## Liveness and readiness probe values
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: false
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: false
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    startupProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1


    ## Enable pod autoscaling using HorizontalPodAutoscaler
    ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    ##
    hpa:
      enabled: false
      cputhreshold: 60
      minPods: 1
      maxPods: 10

    nodeSelector: {}

    tolerations: []

    affinity: {}


    ## Prometheus Exporter / Metrics
    ##
    metrics:
      enabled: false

      replicaCount: 1
      # The metrics exporter needs to know how you serve Nextcloud either http or https
      https: false
      # Use API token if set, otherwise fall back to password authentication
      # https://github.com/xperimental/nextcloud-exporter#token-authentication
      # Currently you still need to set the token manually in your nextcloud install
      token: ""
      timeout: 5s

      image:
        repository: xperimental/nextcloud-exporter
        tag: 0.6.0
        pullPolicy: IfNotPresent

      ## Metrics exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      # resources: {}

      ## Metrics exporter pod Annotation and Labels
      # podAnnotations: {}

      # podLabels: {}

      service:
        type: ClusterIP
        ## Use serviceLoadBalancerIP to request a specific static IP,
        ## otherwise leave blank
        # loadBalancerIP:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9205"
        labels: {}

      ## Prometheus Operator ServiceMonitor configuration
      ##
      serviceMonitor:
        ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
        ##
        enabled: true

        ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
        ##
        namespace: ""

        ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
        ##
        jobLabel: ""

        ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        interval: 30s

        ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        scrapeTimeout: ""

        ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
        ##
        labels: {}


    rbac:
      enabled: false
      serviceaccount:
        create: true
        name: nextcloud-serviceaccount
        annotations: {}
