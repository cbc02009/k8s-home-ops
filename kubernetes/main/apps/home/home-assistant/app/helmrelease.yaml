---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app home-assistant
  namespace: home
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      home-assistant:
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          # 02-wait-for-pg:
          #   image:
          #     repository: quay.io/prometheus/busybox
          #     tag: 'latest'
          #   imagePullPolicy: IfNotPresent
          #   command:
          #     [
          #       "sh",
          #       "-c",
          #       'until nc -vz postgres.${EXTERNAL_DOMAIN} 5432; do echo "Waiting for postgres..."; sleep 3; done;',
          #     ]
          01-init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: '16.8'
            envFrom:
              - secretRef:
                  name: *app
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/home-assistant
              tag: 2025.3.2@sha256:bc6ac31069eae42f4ff41d2dd0d600aaf8f02b109664cd6aff46709d13eff779
            env:
              TZ: "${TZ}"
              POSTGRES_HOST: postgres-rw.databases.svc.cluster.local
              POSTGRES_DB: home_assistant
              HASS_HTTP_TRUSTED_PROXY_1: 10.0.0.0/8
            envFrom:
              - secretRef:
                  name: *app
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 2Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }


    service:
      app:
        controller: *app
        ports:
          http:
            port: &port 8123

    route:
      app:
        hostnames:
          - "{{ .Release.Name }}.kokoro.wtf"
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      config:
        existingClaim: *app
        globalMounts:
          - path: /config
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
      tts:
        type: emptyDir
        globalMounts:
          - path: /config/tts
      tmp:
        type: emptyDir
        globalMounts:
          - path: /tmp
