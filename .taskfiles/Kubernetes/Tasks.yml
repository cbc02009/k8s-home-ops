---
version: "3"

tasks:
  bootstrap:
    desc: Bootstrap a new cluster
    cmds:
      - |
        kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/crds/
        kubectl apply -n flux-system --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/flux
        kubectl apply -f {{.CLUSTER_DIR}}/flux/vars/cluster-settings.yaml
        kubectl create secret generic  -n flux-system cluster-secrets --from-env-file <(doppler secrets download -p cluster -c prd --no-file --format docker)
        kubectl create secret generic -n flux-system \
            doppler-token-auth-api \
            --from-literal dopplerToken=$(doppler secrets -p doppler -c prd get DOPPLER_PAT --plain)

  debug-volume:
    desc: Attach a volume to a container for debugging, ex. VOLUME=zigbee2mqtt-config-v1 NAMESPACE=home task debug-volume
    interactive: true
    cmds:
      - defer: kubectl -n ${NAMESPACE} delete pod debug-${VOLUME}
      - |
        cat <<EOF | kubectl apply -f -
        kind: Pod
        apiVersion: v1
        metadata:
          name: "debug-${VOLUME}"
          namespace: "${NAMESPACE}"
          labels:
            volume: "${VOLUME}"
        spec:
          containers:
            - name: debug
              image: docker.io/library/alpine:3.15
              command: ["/bin/sh"]
              tty: true
              lifecycle:
                postStart:
                  exec:
                    command:
                      - /bin/sh
                      - -c
                      - apk add --no-cache curl nano
              volumeMounts:
                - name: data
                  mountPath: /data
                - name: backups
                  mountPath: /mnt/backups
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: "${VOLUME}"
            - name: backups
              nfs:
                server: "nas.ctec.run"
                path: "/tank/k8s"
        EOF
      - kubectl -n $NAMESPACE wait --for=condition=ready pod -l volume=$VOLUME
      - kubectl -n $NAMESPACE exec $(kubectl get pod -n $NAMESPACE -l volume=$VOLUME -o name) -it debug -- /bin/sh
