---
version: "3"

tasks:
  nas-deps-pause:
    desc: Pause all Helm Releases that rely on NAS storage
    cmds:
      - flux suspend hr -n media plex
      - kubectl scale -n media statefulset/plex --replicas 0
      # - flux suspend hr -n downloads qbittorrent
      # - kubectl scale -n downloads deploy/qbittorrent --replicas 0
      #     - flux suspend hr -n downloads sabnzbd
      #     - kubectl scale -n downloads deploy/sabnzbd --replicas 0
      #     - flux suspend hr -n downloads nzbget
      #     - kubectl scale -n downloads deploy/nzbget --replicas 0
      - flux suspend hr -n organizarrs radarr
      - kubectl scale -n organizarrs statefulset/radarr --replicas 0
      - flux suspend hr -n organizarrs readarr
      - kubectl scale -n organizarrs deploy/readarr --replicas 0
      - flux suspend hr -n organizarrs sonarr
      - kubectl scale -n organizarrs statefulset/sonarr --replicas 0
      - flux suspend hr -n organizarrs animarr
      - kubectl scale -n organizarrs statefulset/animarr --replicas 0
      # - flux suspend hr -n organizarrs lidarr
      # - kubectl scale -n organizarrs deploy/lidarr --replicas 0
      # - flux suspend hr -n organizarrs calibre
      # - kubectl scale -n organizarrs deploy/calibre --replicas 0
      # - flux suspend hr -n organizarrs calibre-web
      # - kubectl scale -n organizarrs deploy/calibre-web --replicas 0
      # - flux suspend hr -n organizarrs calibre-web
      # - kubectl scale -n organizarrs deploy/calibre-web --replicas 0
      - flux suspend hr -n home-automation frigate
      - kubectl scale -n home-automation deploy/frigate --replicas 0
      - flux suspend hr -n monitoring loki
      - kubectl scale -n monitoring deploy/loki --replicas 0

  nas-deps-resume:
    desc: Resume all Helm Releases that rely on NAS storage
    cmds:
      - flux resume hr -n media plex
      - kubectl scale -n media statefulset/plex --replicas 1
      # - flux resume hr -n downloads qbittorrent
      # - kubectl scale -n downloads deploy/qbittorrent --replicas 1
      #     - flux resume hr -n downloads sabnzbd
      #     - kubectl scale -n downloads deploy/sabnzbd --replicas 1
      #     - flux resume hr -n downloads nzbget
      #     - kubectl scale -n downloads deploy/nzbget --replicas 1
      - flux resume hr -n organizarrs radarr
      - kubectl scale -n organizarrs statefulset/radarr --replicas 1
      - flux resume hr -n organizarrs readarr
      - kubectl scale -n organizarrs deploy/readarr --replicas 1
      - flux resume hr -n organizarrs sonarr
      - kubectl scale -n organizarrs statefulset/sonarr --replicas 1
      - flux resume hr -n organizarrs animarr
      - kubectl scale -n organizarrs statefulset/animarr --replicas 1
      - flux resume hr -n organizarrs lidarr
      - kubectl scale -n organizarrs deploy/lidarr --replicas 1
      # - flux resume hr -n organizarrs calibre
      # - kubectl scale -n organizarrs deploy/calibre --replicas 1
      # - flux resume hr -n organizarrs calibre-web
      # - kubectl scale -n organizarrs deploy/calibre-web --replicas 1
      - flux resume hr -n home-automation frigate
      - kubectl scale -n home-automation deploy/frigate --replicas 1
      - flux resume hr -n monitoring loki
      - kubectl scale -n monitoring deploy/loki --replicas 1

  netshoot:
    desc: Create a netshoot container for debugging
    cmds:
      - kubectl run tmp-shell --rm -i --tty --image ghcr.io/nicolaka/netshoot:latest {{.CLI_ARGS}}

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmds:
      - flux reconcile -n flux-system source git k8s-home-ops
      - flux reconcile -n flux-system kustomization apply-cluster-deployment

  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    cmds:
      - task: nodes
      - task: kustomizations
      - task: helmreleases
      - task: helmrepositories
      - task: gitrepositories
      - task: certificates
      - task: ingresses
      - task: pods

  mount:
    desc: Mount a PersistantVolumeClaim to a pod temporarily
    interactive: true
    vars:
      claim: '{{ or .claim (fail "PersistentVolumeClaim `claim` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      - |
        kubectl run -n {{.namespace}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
          {
            "apiVersion": "v1",
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "ghcr.io/onedr0p/alpine:rolling",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/data/config"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "config",
                  "persistentVolumeClaim": {
                    "claimName": "{{.claim}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'
    preconditions:
      - kubectl -n {{.namespace}} get pvc {{.claim}}
