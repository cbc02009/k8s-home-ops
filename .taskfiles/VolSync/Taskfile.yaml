---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

# This taskfile is used to manage certain VolSync tasks for a given application, limitations are described below.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Applications are deployed as either a Kubernetes Deployment or StatefulSet
#   4. Each application only has one PVC that is being replicated

x-task-vars: &task-vars
  app: '{{.app}}'
  controller: '{{.controller}}'
  ns: '{{.ns}}'
  previous: '{{.previous}}'
  ts: '{{.ts}}'

vars:
  scriptsDir: '{{.ROOT_DIR}}/.taskfiles/VolSync/scripts'
  templatesDir: '{{.ROOT_DIR}}/.taskfiles/VolSync/templates'
  ts: '{{now | date "150405"}}'

tasks:
  list:
    desc: List all snapshots taken by restic for a given app (ex. task volsync:list app=plex [ns=default])
    silent: true
    cmds:
      - envsubst < <(cat {{.templatesDir}}/list.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait.sh list-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/list-{{.app}}-{{.ts}} --for condition=complete --timeout=1m
      - kubectl -n {{.ns}} logs job/list-{{.app}}-{{.ts}} --container list
      - kubectl -n {{.ns}} delete job list-{{.app}}-{{.ts}}
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
    env: *task-vars
    preconditions:
      - sh: test -f {{.scriptsDir}}/wait.sh
      - sh: test -f {{.templatesDir}}/list.tmpl.yaml

  unlock:
    desc: Unlocks restic repository for a given app (ex. task volsync:unlock app=plex [ns=default])
    silent: true
    cmds:
      - envsubst < <(cat {{.templatesDir}}/unlock.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait.sh unlock-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/unlock-{{.app}}-{{.ts}} --for condition=complete --timeout=1m
      - kubectl -n {{.ns}} logs job/unlock-{{.app}}-{{.ts}} --container unlock
      - kubectl -n {{.ns}} delete job unlock-{{.app}}-{{.ts}}
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
    env: *task-vars
    preconditions:
      - sh: test -f {{.scriptsDir}}/wait.sh
      - sh: test -f {{.templatesDir}}/unlock.tmpl.yaml

  # To run backup jobs in parallel for all replicationsources:
  #  - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:snapshot app=$0 ns=$1'
  #
  snapshot:
    desc: Trigger a Restic ReplicationSource snapshot (ex. task volsync:snapshot app=plex [ns=default])
    cmds:
      # TODO: Only suspend when a arg is passed to the task
      - task: suspend-task
        vars: *task-vars
      - kubectl -n {{.ns}} patch replicationsources {{.app}} --type merge -p '{"spec":{"trigger":{"manual":"{{.ts}}"}}}'
      - bash {{.scriptsDir}}/wait.sh volsync-src-{{.app}} {{.ns}}
      - kubectl -n {{.ns}} wait job/volsync-src-{{.app}} --for condition=complete --timeout=120m
      # TODO: Find a way to output logs
      # Error from server (NotFound): jobs.batch "volsync-src-zzztest" not found
      # - kubectl -n {{.ns}} logs job/volsync-src-{{.app}}
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
      # Query to find the controller associated with the app
      controller:
        sh: |
          if kubectl -n {{.ns}} get deployment.apps/{{.app}} >/dev/null 2>&1 ; then
            echo "deployment.apps/{{.app}}"
          else
            echo "statefulset.apps/{{.app}}"
          fi
    env: *task-vars
    preconditions:
      - sh: test -f {{.scriptsDir}}/wait.sh
      - sh: kubectl -n {{.ns}} get replicationsources {{.app}}
        msg: "ReplicationSource '{{.app}}' not found in namespace '{{.ns}}'"

  # To run restore jobs in parallel for all replicationdestinations:
  #   - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=2 -l bash -c 'task volsync:restore app=$0 ns=$1'
  #
  restore:
    desc: Trigger a Restic ReplicationSource restore (ex. task volsync:restore app=plex [ns=default previous=2])
    cmds:
      - task: suspend-task
        vars: *task-vars
      - task: wipe-task
        vars: *task-vars
      - task: restore-task
        vars: *task-vars
      - task: resume-task
        vars: *task-vars
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
      previous: '{{.previous | default 2}}'
      # Query to find the controller associated with the app
      controller:
        sh: |
          if kubectl -n {{.ns}} get deployment.apps/{{.app}} >/dev/null 2>&1 ; then
            echo "deployment.apps/{{.app}}"
          else
            echo "statefulset.apps/{{.app}}"
          fi
    env: *task-vars
    preconditions:
      - sh: test -f {{.templatesDir}}/wipe.tmpl.yaml
      - sh: test -f {{.templatesDir}}/replicationdestination.tmpl.yaml
      - sh: test -f {{.scriptsDir}}/wait.sh

  # Suspend the Flux ks and hr
  suspend-task:
    internal: true
    cmds:
      - flux -n flux-system suspend kustomization {{.app}}
      - flux -n {{.ns}} suspend helmrelease {{.app}}
      - kubectl -n {{.ns}} scale {{.controller}} --replicas 0
      - kubectl -n {{.ns}} wait pod --for delete --selector="app.kubernetes.io/name={{.app}}" --timeout=2m
    env: *task-vars

  # Wipe the PVC of all data
  wipe-task:
    internal: true
    cmds:
      - envsubst < <(cat {{.templatesDir}}/wipe.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait.sh wipe-{{.app}}-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/wipe-{{.app}}-{{.app}}-{{.ts}} --for condition=complete --timeout=120m
      - kubectl -n {{.ns}} logs job/wipe-{{.app}}-{{.app}}-{{.ts}} --container wipe
      - kubectl -n {{.ns}} delete job wipe-{{.app}}-{{.app}}-{{.ts}}
    env: *task-vars

  # Create VolSync replicationdestination CR to restore data
  restore-task:
    internal: true
    cmds:
      - envsubst < <(cat {{.templatesDir}}/replicationdestination.tmpl.yaml) | kubectl apply -f -
      - bash {{.scriptsDir}}/wait.sh volsync-dst-{{.app}}-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/volsync-dst-{{.app}}-{{.app}}-{{.ts}} --for condition=complete --timeout=120m
      - kubectl -n {{.ns}} delete replicationdestination {{.app}}-{{.app}}-{{.ts}}
    env: *task-vars

  # Resume Flux ks and hr
  resume-task:
    internal: true
    cmds:
      - flux -n {{.ns}} resume helmrelease {{.app}}
      - flux -n flux-system resume kustomization {{.app}}
    env: *task-vars
